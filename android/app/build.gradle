def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// ========================== Start adding ============================
// 環境変数配列
def dartEnvironmentVariables = [
        BUNDLE_ID_SUFFIX: null,
        BUILD_ENV: ''
]
// --dart-define読み込み
if (project.hasProperty('dart-defines')) {
    dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = URLDecoder.decode(entry, 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }
}
// デフォルトアプリ表示名
def appName = "App"
// ランチャーアイコンパス
def launcherIconPath = "@mipmap/ic_launcher"
def launcherRoundIconPath = "@mipmap/ic_launcher_round"
if (dartEnvironmentVariables.BUNDLE_ID_SUFFIX != null) {
    appName = dartEnvironmentVariables.BUNDLE_ID_SUFFIX
    launcherIconPath += "_${dartEnvironmentVariables.BUILD_ENV}"
    launcherRoundIconPath += "_${dartEnvironmentVariables.BUILD_ENV}"
}
// ========================== End adding ============================

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services' // added

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.flutter_fcm_push_notify"
        minSdkVersion 23 // 16 -> 23
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        // Start adding
        if (dartEnvironmentVariables.BUNDLE_ID_SUFFIX != null) {
            applicationIdSuffix dartEnvironmentVariables.BUNDLE_ID_SUFFIX
        }
        manifestPlaceholders = [
                appName: appName,
                launcherIcon: launcherIconPath,
                roundLauncherIcon: launcherRoundIconPath
        ]
        // End adding
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.google.firebase:firebase-messaging:21.0.1" // added
}
